---
title: "Laboratorio: Programación"
author: "Kevin Pérez García"
toc: true
format: html
editor: visual
---

## Funciones

### Creación de una función

#### Estructura estándar de una función

![](images/image-1954686568.png)

#### Aplicación: Función identidad

-   Forma estándar

```{r}
identidad_estandar <- function(x){
  x <- x
  return(x)
}

identidad_estandar(2)

identidad_estandar(x=2)
```

-   Forma lineal

```{r}
identidad_lineal <- function(x) x

identidad_lineal(2)
```

-   Forma multilineal

```{r}
identidad_lineal_etiqueta = function(x){
  x = x
}

identidad_lineal_etiqueta(4)
```

    - Con etiqueta

```{r}
identidad_lineal_etiqueta = function(x){
  x = x
  cat("Respuesta:",x)
}

identidad_lineal_etiqueta(4)
```

#### Ejemplos

-   Función inversa

```{r}
inversa <- function(x){
  x <- 1/x
  return(x)
}

inversa(8)
```

-   Función suma

```{r}
suma <- function(x,y){
  return(x+y)
}

suma(1,2)
```

-   Función resta

```{r}
resta <- function(x,y){
  diferencia <- x - y
  return(diferencia)
}

resta(2,1)
```

-   Función media aritmética: construya una función que retorne la media de dos valores.

```{r}
media <- function(x,y){
  resultado <- (x+y)/2
  return(resultado)
}

media(1,2)
```

## Estructuras de control

### Secuenciales: *if else*

#### Sintaxis

* Lineal

```{r}
if (3>2) print("hola") else print("mundo")
```

* Multilineal

```{r}
if (3<2) {
  print("hola")
} else {
  print("mundo")
}
```

#### Anidación

```{r}
if (3<2) {
  print("hola")
} else {
  if (2<1) {
    print("mundo")
  } else {
    print("hola mundo")
  }
}
```

##### Aplicación.

![](images/image-546832947.png)

* Versión usual
```{r}
mi_funcion <- function(x){
  if (x<0){
    return(0)
  } else {
    if (x>=0 & x<=5) {
      return(x/5)
    } else {
      return(1)
    }
  }
}

mi_funcion(-2)
mi_funcion(4)
mi_funcion(6)
```

*    Versión negación
```{r}
mi_funcion_negacion <- function(x){
  if (!(x<0)){
    if (!(x>=0 & x<=5)) {
      return(1)
    } else {
      return(x/5)
    }
  } else {
    return(0)
  }
}

mi_funcion_negacion(-2)
mi_funcion_negacion(4)
mi_funcion_negacion(6)
```

::: callout-note
No es recomendable usar `if-else` anidados, en vez de ello utilice **clausulas de guarda** (*guard clauses*)
:::

##### Guard clauses

```{r}
mi_funcion_guardia <- function(x){
  if (x<0){
    return(0)
  }
  if (x>=0 & x<=5){
    return(x/5)
  }
  if (x>5) {
    return(1)
  }
}

mi_funcion_guardia(-2)
mi_funcion_guardia(4)
mi_funcion_guardia(6)
```

##### Función *ifelse()*

Permite evaluar estructuras de control secuencias con vectores.

```{r}
# dados los siguientes vectores
genero <- c("hombre", "hombre", "mujer", "hombre", "mujer")
edad <- c(10,14,80,56,27)

ifelse(genero=="hombre",
       ifelse(edad>=18, "hombre adulto", "hombre joven"),
       ifelse(edad>=18, "mujer adulta", "mujer joven")
       )
```


### Cíclicas o repetitivas

#### Bucle *for*

##### Sintaxis

* Lineal
```{r}
for (n in c(1,2,3)) print(n)
```

* Multilineal

```{r}
for (n in seq(1:3)){
  print(n)
}
```

##### Anidación

```{r}
for (i in c(1,2,3)){
  for (j in c(4,5,6)){
    print(i+j)
  }
}
```

#### *next* and *break*

```{r}
for (iter in 1:15){
  if (iter==3) next
  if (iter==6) break
  print(iter)
}
```

### Bucle *while*

#### Ejemplo

```{r}
# dado dos vectores
x <- c(1,2,3,4)
y <- c(5,6,7,8)

n <- length(x) # ó length(y)
z <- numeric(n) # crea un vector, de longitud n, de ceros

i <- 0
while (i<n){
  z[i] <- x[i] + y[i]
  i <- i+1
}

print(z)
```

