---
title: "trabajo-final"
author: "Kevin Perez Garcia"
date: "4 de abril del 2023"
toc: true
format:
  html:
    html-math-method: katex
    self-contained: true
execute:
  warning: false
editor: visual
---

## Inicialización del proyecto

### Carga de librerías

```{r}
library(ggplot2)
```

## Pregunta 3. Programación

1.  Implemente y evalúe una función que multiple dos vectores.

```{r}
# Implementación

vector_multiplication <- function(x,y) return(x*y)

# Evaluación

vector_multiplication(x = c(1,2,3), y = c(4,5,6))
```

2.  Implemente y evalúe una función para la fórmula de Baskara.

Las soluciones de una ecuación de segundo grado $$ax^2+bx+c=0$$ donde $a$, $b$ y $c$ son sus coeficientes con $a \neq 0$, pueden obtenerse mediante la fórmula de Baskara $$x_{1,2} = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a}$$

```{r}
# Implementación

baskara <- function(a,b,c){
  x_1 = (-b + sqrt(b^2 - 4*a*c) ) / 2*a
  x_2 = (-b - sqrt(b^2 - 4*a*c) ) / 2*a
  return(c(x_1, x_2))
}

# Evaluación

baskara(a=1, b=8, c=3)
```

3.  Simulación

-   Obtenga una muestra aleatoria normal, de cualquier tamaño, de media igual a $0$ y varianza igual a $1$.

```{r}
set.seed(1)
muestra_aleatoria <- rnorm(n=1000, mean=0, sd=1)
muestra_aleatoria[1:10]
muestra_aleatoria[1:10]
```

-   Para conocer el comportamiento aleatorio de la muestra,

    -   calcule sus estadísticas

        -   Medidas de tendencia central

```{r}
# Media
mean(muestra_aleatoria)

# Mediana
median(muestra_aleatoria)
    ```

        -   Medidas de dispersión

```{r}
# Desviación estándar
sd(muestra_aleatoria)

# Coeficiente de variación
sd(muestra_aleatoria) / mean(muestra_aleatoria)

# Rango
range(muestra_aleatoria)

# Rango intercuartílico
IQR(muestra_aleatoria)
```

        -   Medidas de posición

```{r}
# Máximo
max(muestra_aleatoria)

# Mínimo
min(muestra_aleatoria)

# Cuartiles
quantile(muestra_aleatoria)

# Cuantiles
quantile(muestra_aleatoria, 0.10)
```

        -   Varias medidas

```{r}
summary(muestra_aleatoria)

pastecs::stat.desc(iris)

psych::describe(muestra_aleatoria)
```

    -   genere gráficos.

Convirtiendo a dataframe

```{r}
df <- data.frame(muestra_aleatoria)
```

        -   Gráfico de cajas    

```{r}
ggplot(df, aes(y=muestra_aleatoria)) +
  geom_boxplot()
```

        -   Gráfico de violín

```{r}
ggplot(df, aes(y=muestra_aleatoria, x="")) +
  geom_violin()
```

### Base de datos a emplear en las siguientes dos últimas preguntas

Utilice la base de datos *games.csv* obtenida de [*Game Recommendations on Stream*](https://www.kaggle.com/datasets/antonkozyriev/game-recommendations-on-steam).

## Pregunta 2. Importación de datos

1.  Importe la base de datos

-   Inicializando el proyecto

```{r}
library(here)
here_base_datos <- here("trabajo_final", "data_raw", "games.csv")
```

```{r}
library(readr)
base_datos <- read.csv(here_base_datos)
```

2.  Ordene la base de datos ascendente y descendentemente respecto a la variable *Price_final*

-   Inspección de la variables *price_final*

```{r}
summary(base_datos$price_final)
```

-   Orden inicial de la base de datos

```{r}
head(base_datos, n=10)
```

-   Orden ascendente

```{r}
orden_ascendente <- order(base_datos$price_final)
base_datos_ascendente <- base_datos[orden_ascendente,]
head(base_datos_ascendente, n=10)
```

-   Orden descendente

```{r}
orden_descendente <- order(-base_datos$price_final)
base_datos_descendente <- base_datos[orden_descendente,]
head(base_datos_descendente)
```

3.  Obtenga un resumen estadístico

-   Medidas de tendencia central

```{r}
# Media
mean(base_datos$price_final)

# Mediana
median(base_datos$price_final)
```

-   Medidas de dispersión

```{r}
# Desviación estándar
sd(base_datos$price_final)

# Coeficiente de variación
sd(base_datos$price_final) / mean(base_datos$price_final)

# Rango
range(base_datos$price_final)

# Rango intercuartílico
IQR(base_datos$price_final)
```

-   Medidas de posición

```{r}
# Máximo
max(base_datos$price_final)

# Mínimo
min(base_datos$price_final)

# Cuartiles
quantile(base_datos$price_final)

# Cuantiles
quantile(base_datos$price_final, 0.10)
```

-   Varias medidas

```{r}
summary(base_datos$price_final)

pastecs::stat.desc(base_datos$price_final)

psych::describe(base_datos$price_final)
```

4.  Obtenga gráficas

-   Histograma

```{r}
ggplot(base_datos, aes(x=price_final)) +
  geom_histogram()
```

-   Diagrama de cajas

```{r}
ggplot(base_datos, aes(y=price_final)) +
  geom_boxplot()
```

-   Gráfico de violín

```{r}
ggplot(base_datos, aes(x="", y=price_final)) +
  geom_violin()
```

## Pregunta 1. Esctructura de datos

1.  Cree vectores con los títulos de la base de datos.

```{r}
titulos <- names(base_datos)
titulos

cual <- c("app_id", "title", "date_release")
sistema_operativo <- c("win","mac","linux")
precios <- c("price_final", "price_original", "discount")
ademas <- c("steam_deck", "user_reviews", "rating", "positive_ratio")
```

2.  Cree vector numérico con el precio final de los videojuegos.

```{r}
precio_original <- base_datos$price_final/(1 - base_datos$discount / 100)
class(precio_original)

summary(base_datos$price_original)
summary(precio_original)
```

3.  Crear una condición lógica de precios bajos, ejemplo: precios menores a $10.99$.

```{r}
precio_bajo <- ifelse(base_datos$price_final < 10.99, T, F)
class(precio_bajo)
head(precio_bajo)
```

4.  Sumar $5$ al vector creado.

```{r}
precio_bajo <- precio_bajo + 5
class(precio_bajo)
head(precio_bajo)
```

5.  Dividir el vector creado entre $2$.

```{r}
head(base_datos$precio_bajo)
nuevo_rating <- base_datos$precio_bajo / 2
```

6.  Calcule la media, moda, max, min de los datos de tipo numérico. Verificar con la función *class*.

Verificamos el tipo de dato de cada variable de la base de datos

```{r}
titulos
length(titulos)
for(n in 1:13){
  print(titulos[n])
  print(class(base_datos[,n]))
}
```

Antes de realizar el análisis descriptivo, tenemos que crear una función que nos retorno la moda de un vector de elementos

```{r}
get_mode <- function(f) {
  uf <- unique(f)
  tab <- tabulate(match(f,uf))
  uf[tab == max(tab)]
}
```

Luego, realizamos el análisis descriptivo de las variables numéricas

-   Para la variable *price_final*

```{r}
mean(base_datos$price_final)
max(base_datos$price_final)
min(base_datos$price_final)
get_mode(base_datos$price_final)
```

-   Para la variable *price_original*

```{r}
mean(base_datos$price_original)
max(base_datos$price_original)
min(base_datos$price_original)
get_mode(base_datos$price_original)
```

-   Para la variable *discount*

```{r}
mean(base_datos$discount)
max(base_datos$discount)
min(base_datos$discount)
get_mode(base_datos$discount)
```

7.  Crear una matriz con la base de datos y guardarla en una nueva variable.

```{r}
matriz <- cbind(base_datos$price_final,base_datos$price_original,base_datos$discount)
head(matriz)
```

8.  Agregar filas y columnas a la matriz.

-   Agregando columna de $1$.

```{r}
dim(matriz)
vector1 <- rep.int(c(1),46068)

matriz <- cbind(matriz,vector1)
dim(matriz)
```

-   Agregando fila

```{r}
vector_fila <- c(20.00, 14.00, 0, 1)

dim(matriz)
matriz <- rbind(matriz, vector_fila)
dim(matriz)
```

9.  Eliminar columnas y filas de la matriz.

-   Eliminando columnas

```{r}
head(matriz)
matriz <- matriz[,-4]
head(matriz)
```

-   Eliminando filas

```{r}
dim(matriz)
matriz <- matriz[-46071,]
dim(matriz)
```

10. Seleccionar los elementos de la matriz.

-   Las 10 primeras filas de la primera columna

```{r}
matriz[1:10,1]
```

-   El elemento en la fila 20 y columna 3

```{r}
matriz[20,3]
```

11. Convertir la matriz en dataframe y asignas nombres a las columnas.

12. Acceder a los datos del dataframe.

13. Cambiar nombre de dataframe.

14. Seleccionar un elemento del dataframe.
